<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title>Muxup</title>
<subtitle>Adventures in collaborative open source development</subtitle>
<link href="https://muxup.com/feed.xml" rel="self" type="application/atom+xml"/>
<link href="https://muxup.com"/>
<updated>2023-02-27T12:00:00Z</updated>
<id>https://muxup.com/feed.xml</id>
<entry>
<title>2023Q1 week log</title>
<published>2023-02-27T12:00:00Z</published>
<updated>2023-02-27T12:00:00Z</updated>
<link rel="alternate" href="https://muxup.com/2023q1/week-log"/>
<id>https://muxup.com/2023q1/week-log</id>
<content type="html">
&lt;p&gt;I tend to keep quite a lot of notes on the development related (sometimes at
work, sometimes not) I do on a week-by-week basis, and thought it might be fun
to write up the parts that were public. This
may or may not be of wider interest, but it aims to be a useful aide-m√©moire
for my purposes at least. Weeks with few entries might be due to focusing on
downstream work (or perhaps just a less productive week - I am only human!).&lt;/p&gt;
&lt;h2 id=&quot;week-of-20th-february-2023&quot;&gt;&lt;a href=&quot;#week-of-20th-february-2023&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Week of 20th February 2023&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Iterated on &lt;a href=&quot;https://reviews.llvm.org/D144353&quot;&gt;D144353&lt;/a&gt; (aiming to fix LLD
regression related to merging RISC-V attributes) based on review feedback
and committed it.
&lt;ul&gt;
&lt;li&gt;Created &lt;a href=&quot;https://github.com/llvm/llvm-project/issues/60889&quot;&gt;an issue to track this as a
regression&lt;/a&gt;, aiming for
a backport into 16.0.0, and &lt;a href=&quot;https://github.com/llvm/llvm-project-release-prs/pull/324#issuecomment-1445012422&quot;&gt;requested that
backport&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also some related discussion in ClangBuiltLinux issues
&lt;a href=&quot;https://github.com/ClangBuiltLinux/linux/issues/1777&quot;&gt;#1777&lt;/a&gt; and
&lt;a href=&quot;https://github.com/ClangBuiltLinux/linux/issues/1808&quot;&gt;#1808&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Committed &lt;a href=&quot;https://reviews.llvm.org/D143172&quot;&gt;my llvm-zorg patch to add the qemu-user based RISC-V
builder&lt;/a&gt;, after finalising provisioning
the machine to run it. The builder is live on the LLVM staging buildmaster
&lt;a href=&quot;https://lab.llvm.org/staging/#/builders/241&quot;&gt;as
clang-rv64gc-qemu-user-single-stage&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Worked to resolve remaining test failures and stability issues. One
recurrent issue was an assert in &lt;code&gt;___pthread_mutex_lock&lt;/code&gt; when executing
&lt;code&gt;ccache&lt;/code&gt;. Setting &lt;code&gt;inode_cache=false&lt;/code&gt; in the local &lt;code&gt;ccache&lt;/code&gt; config seems
to avoid this.&lt;/li&gt;
&lt;li&gt;Posted a couple of patches - &lt;a href=&quot;https://reviews.llvm.org/D144464&quot;&gt;D144464&lt;/a&gt;
and &lt;a href=&quot;https://reviews.llvm.org/D144465&quot;&gt;D144465&lt;/a&gt; to tweak the LLVM docs on
setting up a builder, based on my experience doing so.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chased for reviews and clarification about pre-commit test requirements for
my libcxx RISC-V test fix patch,
&lt;a href=&quot;https://reviews.llvm.org/D143158&quot;&gt;D134158&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Committed a couple of further test updates for Wasm in LLVM ahead of some
upcoming patches. &lt;a href=&quot;https://reviews.llvm.org/rG771261ff0128&quot;&gt;771261f&lt;/a&gt;
&lt;a href=&quot;https://reviews.llvm.org/rG1ae859753c06&quot;&gt;1ae8597&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Left some quick notes on the &lt;a href=&quot;https://discourse.llvm.org/t/rfc-rfc-shepherds/68666/8&quot;&gt;LLVM RFC
shepherds&lt;/a&gt; proposal.&lt;/li&gt;
&lt;li&gt;A variety of upstream LLVM reviews, and received a &lt;a href=&quot;https://reviews.llvm.org/D143115#4151994&quot;&gt;useful clarification on
the RISC-V psABI and the ratification
lifecycle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://llvmweekly.org/issue/477&quot;&gt;LLVM Weekly #477&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;week-of-13th-february-2023&quot;&gt;&lt;a href=&quot;#week-of-13th-february-2023&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Week of 13th February 2023&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;After a fair bit of investigation and thinking about reported compatibility
issues between GNU and LLVM tools (particularly binutils ld and lld) due to
RISC-V extension versioning, &lt;a href=&quot;https://discourse.llvm.org/t/rfc-resolving-issues-related-to-extension-versioning-in-risc-v/68472&quot;&gt;posted an RFC outlining the major issues and a
proposed fix for what I consider to be a regression in
lld&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Landed a few LLVM patches cleaning up tests related to this.
&lt;a href=&quot;https://reviews.llvm.org/rG8b5004864aab&quot;&gt;8b50048&lt;/a&gt;
&lt;a href=&quot;https://reviews.llvm.org/rG574d0c2ec107&quot;&gt;574d0c2&lt;/a&gt;,
&lt;a href=&quot;https://reviews.llvm.org/rGd05e1e99b1d6&quot;&gt;d05e1e9&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Posted &lt;a href=&quot;https://reviews.llvm.org/D144353&quot;&gt;D144353&lt;/a&gt;, a proposed fix for the
LLD regression due to overzealous checking of extensions/versions when
merging RISC-V attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Organised agenda for and ran the bi-weekly &lt;a href=&quot;https://discourse.llvm.org/t/risc-v-llvm-sync-up-call-16th-february-2023/68500&quot;&gt;RISC-V LLVM contributor
call&lt;/a&gt;.
Key discussion items were the extension versioning related compatibility
issue mentioned below and support for emulated TLS (where I&amp;#x27;d &lt;a href=&quot;https://reviews.llvm.org/D143708#4118468&quot;&gt;left some
comments&lt;/a&gt; the previous week).&lt;/li&gt;
&lt;li&gt;Updated my patch (&lt;a href=&quot;https://reviews.llvm.org/D143172&quot;&gt;D143172&lt;/a&gt;) to register
and configure a RISC-V qemu-user based builder with LLVM&amp;#x27;s staging
buildmaster, based on review feedback.&lt;/li&gt;
&lt;li&gt;A variety of upstream LLVM reviews. Also landed
&lt;a href=&quot;https://reviews.llvm.org/D143507&quot;&gt;D143407&lt;/a&gt;, marking Zawrs as
non-experimental.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://llvmweekly.org/issue/476&quot;&gt;LLVM Weekly #476&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;week-of-6th-february-2023&quot;&gt;&lt;a href=&quot;#week-of-6th-february-2023&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Week of 6th February 2023&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Left feedback on the proposed RISC-V psABI
&lt;a href=&quot;https://github.com/riscv-non-isa/riscv-elf-psabi-doc/pull/365&quot;&gt;patch clarifying treatment of empty structs or unions in the FP calling
convention&lt;/a&gt;.
This is a follow-up to the &lt;a href=&quot;https://github.com/riscv-non-isa/riscv-elf-psabi-doc/issues/358&quot;&gt;issue I
filed&lt;/a&gt; on
this issue (where I have &lt;a href=&quot;https://reviews.llvm.org/D142327&quot;&gt;D142327&lt;/a&gt; queued
up for LLVM to fix our incorrect handling).&lt;/li&gt;
&lt;li&gt;Responded to a question on LLVM&amp;#x27;s Discourse &lt;a href=&quot;https://discourse.llvm.org/t/support-for-zicsr-and-zifencei-extensions/68369/2&quot;&gt;about zicsr and zifencei
support in
LLVM&lt;/a&gt;.
As noted, the issue is that we haven&amp;#x27;t moved RV32I/RV64I 2.1 yet which split
out Zicsr and Zifencei. Unfortunately this is a backwards-incompatible
change so requires some care.&lt;/li&gt;
&lt;li&gt;Worked with a colleague trying to reproduce an assertion failure in his
committed patch &lt;a href=&quot;https://reviews.llvm.org/rGeb66833d19573df97034a81279eda31b8d19815b&quot;&gt;adding support for WebAssembly externref in
Clang&lt;/a&gt;
that appeared only on an MSan buildbot. The &lt;a href=&quot;https://github.com/google/sanitizers/wiki/SanitizerBotReproduceBuild&quot;&gt;sanitizers project
guidance&lt;/a&gt;
is useful for this, but I ended up &lt;a href=&quot;https://gist.github.com/asb/645a071903f0c3cf9ef6c59a3d3e0810&quot;&gt;rolling a slightly hacky
script&lt;/a&gt; as I
stepped through each part of the multi-stage build and test sequence.&lt;/li&gt;
&lt;li&gt;Left my thoughts on a &lt;a href=&quot;https://github.com/riscv-non-isa/riscv-c-api-doc/issues/32&quot;&gt;proposed RISC-V preprocessor define to specify
support and for and performance of misaligned
loads/stores&lt;/a&gt;. I
like the idea of the define, but prefer sticking to the &lt;code&gt;Zicclsm&lt;/code&gt;
terminology introduced in the RISC-V profiles.&lt;/li&gt;
&lt;li&gt;Posted patch &lt;a href=&quot;https://reviews.llvm.org/D143507&quot;&gt;D143507&lt;/a&gt; to mark RISC-V
Zawrs as non-experimental, after confirming there were no relevant changes
between the implemented 1.0-rc3 spec and the ratified version.&lt;/li&gt;
&lt;li&gt;A series of WebAssembly GC type related patches remains a work in progress
downstream, but I landed a couple of related minor test cleanups.
&lt;a href=&quot;https://reviews.llvm.org/rG604c9a07f3a9&quot;&gt;604c9a0&lt;/a&gt;,
&lt;a href=&quot;https://reviews.llvm.org/rG3a80dc27ed45&quot;&gt;3a80dc2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Many upstream RISC-V LLVM reviews.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://llvmweekly.org/issue/475&quot;&gt;LLVM Weekly #475&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr style=&quot;margin-top:1.75rem&quot;/&gt;&lt;details id=&quot;article-changelog&quot;&gt;&lt;summary&gt;&lt;a href=&quot;#article-changelog&quot; class=&quot;anchor &quot;aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Article changelog&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;2023-02-27: Added in a forgotten note about trivial buildbot doc
improvements.&lt;/li&gt;
&lt;li&gt;2023-02-27: Initial publication date.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
</content>
</entry>
<entry>
<title>What&#x27;s new for RISC-V in LLVM 15</title>
<published>2022-09-21T12:00:00Z</published>
<updated>2022-09-21T12:00:00Z</updated>
<link rel="alternate" href="https://muxup.com/2022q3/whats-new-for-risc-v-in-llvm-15"/>
<id>https://muxup.com/2022q3/whats-new-for-risc-v-in-llvm-15</id>
<content type="html">
&lt;p&gt;LLVM 15.0.0 was
&lt;a href=&quot;https://discourse.llvm.org/t/llvm-15-0-0-release/65099&quot;&gt;released&lt;/a&gt; around
about two weeks ago now, and I wanted to highlight some of RISC-V specific
changes or improvements that were introduced while going into a little more
detail than I was able to in the &lt;a href=&quot;https://releases.llvm.org/15.0.0/docs/ReleaseNotes.html#changes-to-the-risc-v-backend&quot;&gt;release
notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case you&amp;#x27;re not familiar with LLVM&amp;#x27;s release schedule, it&amp;#x27;s worth noting
that there are two major LLVM releases a year (i.e. one roughly every 6
months) and these are timed releases as opposed to being cut when a pre-agreed
set of feature targets have been met. We&amp;#x27;re very fortunate to benefit from an
active and growing set of contributors working on RISC-V support in LLVM
projects, who are responsible for the work I describe below - thank you!
I coordinate biweekly sync-up calls for RISC-V LLVM contributors, so if you&amp;#x27;re
working in this area please &lt;a href=&quot;https://discourse.llvm.org/c/code-generation/riscv/57&quot;&gt;consider dropping
in&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;linker-relaxation&quot;&gt;&lt;a href=&quot;#linker-relaxation&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Linker relaxation&lt;/h2&gt;
&lt;p&gt;Linker relaxation is a mechanism for allowing the linker to optimise code
sequences at link time. A code sequence to jump to a symbol might
conservatively take two instructions, but once the target address is known at
link-time it might be small enough to fit in the immediate of a single
instruction, meaning the other can be deleted. Because a linker performing
relaxation may delete bytes (rather than just patching them), offsets
including those for jumps within a function may be changed. To allow this to
happen without breaking program semantics, even local branches that might
typically be resolved by the assembler must be emitted as a relocation when
linker relaxation is enabled. See the &lt;a href=&quot;https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-elf.adoc#linker-relaxation&quot;&gt;description in the RISC-V
psABI&lt;/a&gt;
or &lt;a href=&quot;https://www.sifive.com/blog/all-aboard-part-3-linker-relaxation-in-riscv-toolchain&quot;&gt;Palmer Dabbelt&amp;#x27;s blog post on linker
relaxation&lt;/a&gt;
for more background.&lt;/p&gt;
&lt;p&gt;Although LLVM has supported codegen for linker relaxation for a long time, LLD
(the LLVM linker) has until now lacked support for processing these
relaxations. Relaxation is primarily an optimisation, but processing of
&lt;code&gt;R_RISCV_ALIGN&lt;/code&gt; (the alignment relocation) is necessary for correctness when
linker relaxation is enabled, meaning it&amp;#x27;s not possible to link such object
files correctly without at least some minimal support. Fangrui Song
implemented support for
&lt;code&gt;R_RISCV_ALIGN/R_RISCV_CALL/R_RISCV_CALL_PLT/R_RISCV_TPREL_*&lt;/code&gt; relocations in
LLVM 15 and wrote up a &lt;a href=&quot;https://maskray.me/blog/2022-07-10-riscv-linker-relaxation-in-lld&quot;&gt;blog post with more implementation
details&lt;/a&gt;,
which is a major step in bringing us to parity with the GCC/binutils
toolchain.&lt;/p&gt;
&lt;h2 id=&quot;optimisations&quot;&gt;&lt;a href=&quot;#optimisations&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Optimisations&lt;/h2&gt;
&lt;p&gt;As with any release, there&amp;#x27;s been a large number of codegen improvements, both
target-independent and target-dependent. One addition to highlight in the
RISC-V backend is the new &lt;a href=&quot;https://github.com/llvm/llvm-project/blob/release/15.x/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp&quot;&gt;RISCVCodeGenPrepare
pass&lt;/a&gt;.
This is the latest piece of a long-running campaign (largely led by Craig
Topper) to improve code generation related to sign/zero extensions on RV64.
&lt;a href=&quot;https://llvm.org/docs/Passes.html#codegenprepare-optimize-for-code-generation&quot;&gt;CodeGenPrepare&lt;/a&gt;
is a target-independent pass that performs some late-stage transformations to
the input ahead of lowering to SelectionDAG. The RISC-V specific version looks
for opportunities to convert zero-extension to i64 with a sign-extension
(which is cheaper).&lt;/p&gt;
&lt;p&gt;Another new pass that may be of interest is
&lt;a href=&quot;https://github.com/llvm/llvm-project/blob/release/15.x/llvm/lib/Target/RISCV/RISCVMakeCompressible.cpp&quot;&gt;RISCVMakeCompressible&lt;/a&gt;
(contributed by Lewis Revill and Craig Blackmore).  Rather than trying to
improve generated code performance, this is solely focused on reducing code
size, and may increase the static instruction count in order to do so (which
is why it&amp;#x27;s currently only enabled at the &lt;code&gt;-Oz&lt;/code&gt; optimisation level). It looks
for cases where an instruction has been selected which can&amp;#x27;t be represented by
one of the compressed (16-bit as opposed to 32-bit wide) instruction forms.
For instance due to the register not being one of the registers addressable
from the compressed instruction, or the offset being out of range). It will
then look for opportunities to transform the input to make the instructions
compressible. Grabbing two examples from the header comment of the pass:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;background: #ffffff&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&quot;color: #177500&quot;&gt;; &amp;#39;zero&amp;#39; register not addressable in compressed store.&lt;/span&gt;
                 &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;li&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;0&lt;/span&gt;
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;zero&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;0&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;0&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;zero&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;8&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;8&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;zero&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;4&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;4&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;zero&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;24&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;)  &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;24&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;background: #ffffff&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&quot;color: #177500&quot;&gt;; compressed stores support limited offsets&lt;/span&gt;
&lt;span style=&quot;color: #000000&quot;&gt;lui&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;983065&lt;/span&gt;     &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;lui&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;983065&lt;/span&gt; 
                   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;addi&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-256&lt;/span&gt;
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-236&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;20&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-240&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;16&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-244&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;12&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-248&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;8&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-252&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a1&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;4&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;span style=&quot;color: #000000&quot;&gt;sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;-256&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a2&lt;/span&gt;)   &lt;span style=&quot;color: #000000&quot;&gt;=&amp;gt;&lt;/span&gt;   &lt;span style=&quot;color: #000000&quot;&gt;c.sw&lt;/span&gt;  &lt;span style=&quot;color: #000000&quot;&gt;a0&lt;/span&gt;, &lt;span style=&quot;color: #1C01CE&quot;&gt;0&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;a3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#x27;s a whole range of other backend codegen improvements, including
additions to existing RISC-V specific passes but unfortunately it&amp;#x27;s not
feasible to enumerate them all.&lt;/p&gt;
&lt;p&gt;One improvement to note from the Clang frontend is that &lt;a href=&quot;https://reviews.llvm.org/rG7a5cb15ea6fa&quot;&gt;the C intrinsics for
the RISC-V Vector extension are now lazily
generated&lt;/a&gt;, avoiding the need to
parse a huge pre-generated header file and improving compile times.&lt;/p&gt;
&lt;h2 id=&quot;support-for-new-instruction-set-extensions&quot;&gt;&lt;a href=&quot;#support-for-new-instruction-set-extensions&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Support for new instruction set extensions&lt;/h2&gt;
&lt;p&gt;A batch of new instruction set extensions &lt;a href=&quot;https://riscv.org/announcements/2021/12/riscv-ratifies-15-new-specifications/&quot;&gt;were ratified at the end of last
year&lt;/a&gt;
(see also the &lt;a href=&quot;https://wiki.riscv.org/display/HOME/Recently+Ratified+Extensions&quot;&gt;recently ratified extension
list&lt;/a&gt;.  LLVM
14 already &lt;a href=&quot;https://releases.llvm.org/14.0.0/docs/ReleaseNotes.html#changes-to-the-risc-v-target&quot;&gt;featured a number of
these&lt;/a&gt;
(with the vector and ratified bit manipulation extensions no longer being
marked as experimental). In LLVM 15 we were able to fill in some of the gaps,
adding support for additional ratified extensions as well as some new
experimental extensions.&lt;/p&gt;
&lt;p&gt;In particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assembler and disassembler support for the &lt;a href=&quot;https://github.com/riscv/riscv-zfinx/blob/main/zfinx-1.0.0.pdf&quot;&gt;Zdinx, Zfinx, Zhinx, and Zhinxmin
extensions&lt;/a&gt;.
Cores that implement these extensions store double/single/half precision
floating point values in the integer register file (GPRs) as opposed to having a
separate floating-point register file (FPRs).
&lt;ul&gt;
&lt;li&gt;The instructions defined in the conventional floating point extensions are
defined to instead operate on the general purpose registers, and
instructions that become redundant (namely those that involve moving
values from FPRs to GPRs) are removed.&lt;/li&gt;
&lt;li&gt;Cores might implement these extensions rather than the conventional
floating-point in order to reduce the amount of architectural state that
is needed, reducing area and context-switch cost. The downside is of
course that register pressure for the GPRs will be increased.&lt;/li&gt;
&lt;li&gt;Codegen for these extensions is not yet supported (i.e. the extensions are
only supported for assembly input or inline assembly). A patch to provide
this support &lt;a href=&quot;https://reviews.llvm.org/D122918&quot;&gt;is under review&lt;/a&gt; though.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assembler and disassembler support for the &lt;a href=&quot;https://github.com/riscv/riscv-CMOs/blob/master/specifications/cmobase-v1.0.pdf&quot;&gt;Zicbom, Zicbop, and Zicboz
extensions&lt;/a&gt;.
These cache management operation (CMO) extensions add new instructions for
invalidating, cleaning, and flushing cache blocks (Zicbom), zeroing cache
blocks (Zicboz), and prefetching cache blocks (Zicbop).
&lt;ul&gt;
&lt;li&gt;These operations aren&amp;#x27;t currently exposed via C intrinsics, but these will
be added once the appropriate naming has been agreed.&lt;/li&gt;
&lt;li&gt;One of the questions raised during implementation was about the &lt;a href=&quot;https://github.com/riscv/riscv-CMOs/issues/47&quot;&gt;preferred
textual format for the
operands&lt;/a&gt;. Specifically,
whether it should be e.g. &lt;code&gt;cbo.clean (a0)&lt;/code&gt;/&lt;code&gt;cbo.clean 0(a0)&lt;/code&gt; to match the
format used for other memory operations, or &lt;code&gt;cbo.clean a0&lt;/code&gt; as was used in
an early binutils patch. We were able to agree between the CMO working
group, LLVM, and GCC developers on the former approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Assembler, disassembler, and codegen support for the &lt;a href=&quot;https://github.com/riscv/riscv-isa-manual/commit/f518c259c008f926eba4aba67804f62531b6e94b&quot;&gt;Zmmul
extension&lt;/a&gt;.
This extension is just a subset of the &amp;#x27;M&amp;#x27; extension providing just the
multiplication instructions without the division instructions.&lt;/li&gt;
&lt;li&gt;Assembler and disassembler support for the additional CSRs (control and
status registers) and instructions introduced by the &lt;a href=&quot;https://github.com/riscv/riscv-isa-manual/commit/f518c259c008f926eba4aba67804f62531b6e94b&quot;&gt;hypervisor and
Svinval additions to the privileged architecture
specification&lt;/a&gt;.
Svinval provides fine-grained address-translation cache invalidation and
fencing, while the hypervisor extension provides support for efficiently
virtualising the supervisor-level architecture (used to implement KVM for
RISC-V).&lt;/li&gt;
&lt;li&gt;Assembler and disassembler support for the
&lt;a href=&quot;https://github.com/riscv/riscv-isa-manual/blob/266f3759c9c88b0ae18cfca70f875662d89b52db/src/zihintpause.tex&quot;&gt;Zihintpause
extension&lt;/a&gt;.
This adds the &lt;code&gt;pause&lt;/code&gt; instruction intended for use as a hint within
spin-wait loops.
&lt;ul&gt;
&lt;li&gt;Zihintpause was actually the first extension to &lt;a href=&quot;https://riscv.org/announcements/2021/02/risc-v-international-unveils-fast-track-architecture-extension-process-and-ratifies-zihintpause-extension/&quot;&gt;go
through&lt;/a&gt;
RISC-V International&amp;#x27;s fast-track architecture extension process back in
early 2021. We were clearly slow to add it to LLVM, but are trying to keep
a closer eye on ratified extensions going forwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Support was added for the not yet ratified &lt;a href=&quot;https://github.com/riscv/riscv-v-spec/pull/780&quot;&gt;Zvfh
extension&lt;/a&gt;, providing
support for half precision floating point values in RISC-V vectors.
&lt;ul&gt;
&lt;li&gt;Unlike the extensions listed above, support for Zvfh is experimental. This
is a status we use within the RISC-V backend for extensions that are not
yet ratified and may change from release to release with no guarantees on
backwards compatibility. Enabling support for such extensions requires
passing &lt;code&gt;-menable-experimental-extensions&lt;/code&gt; to Clang and specifying the
extension&amp;#x27;s version when listing it in the &lt;code&gt;-march&lt;/code&gt; string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;#x27;s not present in LLVM 15, but LLVM 16 onwards will feature a
&lt;a href=&quot;https://github.com/llvm/llvm-project/blob/main/llvm/docs/RISCVUsage.rst&quot;&gt;user guide for the RISC-V
target&lt;/a&gt;
summarising the level of support for each extension (huge thanks to Philip
Reames for kicking off this effort).&lt;/p&gt;
&lt;h2 id=&quot;other-changes&quot;&gt;&lt;a href=&quot;#other-changes&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Other changes&lt;/h2&gt;
&lt;p&gt;In case I haven&amp;#x27;t said it enough times, there&amp;#x27;s far more interesting changes
than I could reasonably cover. Apologies if I&amp;#x27;ve missed your favourite new
feature or improvement. In particular, I&amp;#x27;ve said relatively little about
RISC-V Vector support. There&amp;#x27;s been a long series of improvements and
correctness fixes in the LLVM 15 development window, after RVV was made
non-experimental in LLVM 14 and there&amp;#x27;s much more to come in LLVM 16 (e.g.
scalable vectorisation becoming enabled by default).&lt;/p&gt;
</content>
</entry>
<entry>
<title>simple-reload</title>
<published>2022-09-10T12:00:00Z</published>
<updated>2022-09-10T12:00:00Z</updated>
<link rel="alternate" href="https://muxup.com/simple-reload"/>
<id>https://muxup.com/simple-reload</id>
<content type="html">
&lt;h2 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;simple-reload provides a straight-forward (~30 lines of JS and zero
server-side requirements) way of reloading a web page as it is iteratively
developed or modified. Once activated, a page will be reloaded
whenever it regains focus.&lt;/p&gt;
&lt;p&gt;If you encounter any problems, please file an issue on the &lt;a href=&quot;https://github.com/muxup/simple-reload&quot;&gt;simple-reload
GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;trade-offs&quot;&gt;&lt;a href=&quot;#trade-offs&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Trade-offs&lt;/h2&gt;
&lt;p&gt;Mature solutions like
&lt;a href=&quot;https://github.com/livereload/livereload-js&quot;&gt;LiveReload&lt;/a&gt; are available, which
makes a different set of trade-offs. Please read this section carefully to
determine if simple-reload makes sense for you:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reload won&amp;#x27;t take place until the page is focused by the user, which
requires manual interaction.
&lt;ul&gt;
&lt;li&gt;This is significantly less burdensome if using focus follows pointer in
your window manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reloads will occur even if there were no changes.
&lt;ul&gt;
&lt;li&gt;With e.g. LiveReload, a reload only happens when the server indicates
there has been a change. This may be a big advantage for stateful pages or
pages with lots of forms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tiny, easy to modify implementation.&lt;/li&gt;
&lt;li&gt;Can dynamically enable/disable reloading on a per-tab basis.
&lt;ul&gt;
&lt;li&gt;This can be helpful to keep a fixed revision of a page in one tab to
compare against.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No server-side requirements.
&lt;ul&gt;
&lt;li&gt;So works even from &lt;code&gt;file://&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Makes it easier if using with a remote server (e.g. no need to worry about
exposing a port as for LiveReload).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;code&quot;&gt;&lt;a href=&quot;#code&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Code&lt;/h2&gt;
&lt;div class=&quot;highlight&quot; style=&quot;background: #ffffff&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&quot;color: #000000&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;type=&lt;/span&gt;&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #177500&quot;&gt;// Set to true to enable reloading from first load.&lt;/span&gt;
&lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;enableByDefault&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;false&lt;/span&gt;;
&lt;span style=&quot;color: #177500&quot;&gt;// Firefox triggers blur/focus events when resizing, so we ignore a focus&lt;/span&gt;
&lt;span style=&quot;color: #177500&quot;&gt;// following a blur within 200ms (assumed to be generated by resizing rather&lt;/span&gt;
&lt;span style=&quot;color: #177500&quot;&gt;// than human interaction).&lt;/span&gt;
&lt;span style=&quot;color: #A90D91&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;blurTimeStamp&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;null&lt;/span&gt;;
&lt;span style=&quot;color: #A90D91&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;focusListener&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;ev&lt;/span&gt;) {
  &lt;span style=&quot;color: #A90D91&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #000000&quot;&gt;ev&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;timeStamp&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;blurTimeStamp&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;200&lt;/span&gt;) {
    &lt;span style=&quot;color: #000000&quot;&gt;location&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;reload&lt;/span&gt;();
  }
}
&lt;span style=&quot;color: #A90D91&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;blurListener&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;ev&lt;/span&gt;) {
  &lt;span style=&quot;color: #A90D91&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #000000&quot;&gt;blurTimeStamp&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;===&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;null&lt;/span&gt;) {
    &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;addEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;focus&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;focusListener&lt;/span&gt;);
  }
  &lt;span style=&quot;color: #000000&quot;&gt;blurTimeStamp&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;ev&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;timeStamp&lt;/span&gt;;
}
&lt;span style=&quot;color: #A90D91&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;deactivate&lt;/span&gt;() {
  &lt;span style=&quot;color: #000000&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;removeItem&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;simple-reload&amp;quot;&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;focus&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;focusListener&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;removeEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;blur&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;blurListener&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;document&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;title&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;document&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;title&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;replace&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;/^\u27F3 /&lt;/span&gt;, &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;addEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;dblclick&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;activate&lt;/span&gt;, { &lt;span style=&quot;color: #000000&quot;&gt;once:&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;true&lt;/span&gt; });
}
&lt;span style=&quot;color: #A90D91&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;activate&lt;/span&gt;() {
  &lt;span style=&quot;color: #000000&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;setItem&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;simple-reload&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;activated&amp;quot;&lt;/span&gt;);
  &lt;span style=&quot;color: #000000&quot;&gt;location&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;reload&lt;/span&gt;();
}
&lt;span style=&quot;color: #A90D91&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #000000&quot;&gt;enableByDefault&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;||&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;getItem&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;simple-reload&amp;quot;&lt;/span&gt;) &lt;span style=&quot;color: #000000&quot;&gt;==&lt;/span&gt; &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;activated&amp;quot;&lt;/span&gt;) {
  &lt;span style=&quot;color: #A90D91&quot;&gt;document&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;title&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;\u27F3 &amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;document&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;title&lt;/span&gt;;
  &lt;span style=&quot;color: #000000&quot;&gt;sessionStorage&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;setItem&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;simple-reload&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;activated&amp;quot;&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;addEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;blur&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;blurListener&lt;/span&gt;);
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;addEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;dblclick&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;deactivate&lt;/span&gt;, { &lt;span style=&quot;color: #000000&quot;&gt;once:&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;true&lt;/span&gt; });
} &lt;span style=&quot;color: #A90D91&quot;&gt;else&lt;/span&gt; {
  &lt;span style=&quot;color: #A90D91&quot;&gt;window&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;addEventListener&lt;/span&gt;(&lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;dblclick&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;activate&lt;/span&gt;);
}
&lt;span style=&quot;color: #000000&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;&lt;a href=&quot;#usage&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;
&lt;p&gt;Paste the above code into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of a HTML file. You can
then enable the reload behaviour by double-clicking on a page (double-click
again to disable again). The title is prefixed with ‚ü≥ while reload-on-focus is
enabled. If you&amp;#x27;d like reload-on-focus enabled by default, just flip the
&lt;code&gt;enableByDefault&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;. You could either modify
whatever you&amp;#x27;re using to emit HTML to include this code when in development
mode, or configure your web server of choice to inject it for you.&lt;/p&gt;
&lt;p&gt;The enabled/disabled state of the reload logic is scoped to the current tab,
so will be maintained if navigating to different pages within the same domain
in that tab.&lt;/p&gt;
&lt;p&gt;In terms of licensing, the implementation is so straight-forward it hardly
feels copyrightable. Please consider it public domain, or MIT if you&amp;#x27;re more
comfortable with an explicit license.&lt;/p&gt;
&lt;h2 id=&quot;implementation-notes&quot;&gt;&lt;a href=&quot;#implementation-notes&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Implementation notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In case it&amp;#x27;s not clear, &amp;quot;blur&amp;quot; events mentioned above are events fired when
an element is no longer in focus.&lt;/li&gt;
&lt;li&gt;As noted in the code comment, Firefox (under dwm in Linux at least) seems to
trigger blur+focus events when resizing the window using a keybinding while
Chrome doesn&amp;#x27;t. Being able to remove the logic to deal with this issue would
be a good additional simplification.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr style=&quot;margin-top:1.75rem&quot;/&gt;&lt;details id=&quot;article-changelog&quot;&gt;&lt;summary&gt;&lt;a href=&quot;#article-changelog&quot; class=&quot;anchor &quot;aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Article changelog&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;2022-09-17: Added link to &lt;a href=&quot;https://github.com/muxup/simple-reload&quot;&gt;simple-reload GitHub
repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;2022-09-11: Removed incorrect statement about &lt;code&gt;sessionStorage&lt;/code&gt; usage being
redundant if &lt;code&gt;enableByDefault = true&lt;/code&gt; (it does mean disabling reloading will
persist).&lt;/li&gt;
&lt;li&gt;2022-09-10: Initial publication date.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
</content>
</entry>
<entry>
<title>Muxup implementation notes</title>
<published>2022-09-10T12:00:00Z</published>
<updated>2022-09-10T12:00:00Z</updated>
<link rel="alternate" href="https://muxup.com/2022q3/muxup-implementation-notes"/>
<id>https://muxup.com/2022q3/muxup-implementation-notes</id>
<content type="html">
&lt;p&gt;This article contains a few notes on various implementation decisions made
when creating &lt;a href=&quot;https://muxup.com&quot;&gt;the Muxup website&lt;/a&gt;. They&amp;#x27;re intended primarily as a
reference for myself, but some parts may be of wider interest. See
&lt;a href=&quot;/about&quot;&gt;about&lt;/a&gt; for more information about things like site
structure.&lt;/p&gt;
&lt;h2 id=&quot;site-generation&quot;&gt;&lt;a href=&quot;#site-generation&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Site generation&lt;/h2&gt;
&lt;p&gt;I ended up writing my own script for generating the site pages from a tree of
Markdown files. &lt;a href=&quot;https://www.getzola.org/&quot;&gt;Zola&lt;/a&gt; seems like an excellent
option, but as I had a very specific idea on how I wanted pages to be
represented in source form and the format and structure of the output, writing
my own was the easier option (see
&lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/build.py&quot;&gt;build.py&lt;/a&gt;). Plus,
yak-shaving is fun.&lt;/p&gt;
&lt;p&gt;I opted to use &lt;a href=&quot;https://github.com/miyuchina/mistletoe&quot;&gt;mistletoe&lt;/a&gt; for
Markdown parsing. I found &lt;a href=&quot;https://github.com/miyuchina/mistletoe/pull/157&quot;&gt;a&lt;/a&gt;
&lt;a href=&quot;https://github.com/miyuchina/mistletoe/pull/158&quot;&gt;few&lt;/a&gt;
&lt;a href=&quot;https://github.com/miyuchina/mistletoe/pull/159&quot;&gt;bugs&lt;/a&gt; in the &lt;code&gt;traverse&lt;/code&gt;
helper function when implementing some transformations on the generated AST,
but upstream was very responsive about reviewing and merging my PRs. The main
wart I&amp;#x27;ve found is that &lt;a href=&quot;https://github.com/miyuchina/mistletoe/issues/56&quot;&gt;parsing and rendering aren&amp;#x27;t fully
separated&lt;/a&gt;, although this
doesn&amp;#x27;t pose any real practical concern for my use case and will hopefully be
fixed in the future. &lt;a href=&quot;https://github.com/lepture/mistune&quot;&gt;mistune&lt;/a&gt; also seemed
promising, but has &lt;a href=&quot;https://github.com/lepture/mistune/issues/296&quot;&gt;some conformance
issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One goal was to keep everything possible in standard Markdown format. This
means, for instance, avoiding custom frontmatter entries or link formats if
the same information could be extracted from the file). Therefore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no &lt;code&gt;title&lt;/code&gt; frontmatter entry - the title is extracted by grabbing
the first level 1 heading from the Markdown AST (and erroring if it isn&amp;#x27;t
present).&lt;/li&gt;
&lt;li&gt;All internal links are written as &lt;code&gt;[foo](/relative/to/root/foo.md)&lt;/code&gt;. The
generator will error if the file can&amp;#x27;t be found, and will otherwise
translate the target to refer to the appropriate permalink.
&lt;ul&gt;
&lt;li&gt;This has the additional advantage that links are still usable if viewing
the Markdown on GitHub, which can be handy if reviewing a previous
revision of an article.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Article changelogs are just a standard Markdown list under the &amp;quot;Article
changelog&amp;quot; heading, which is checked and transformed at the Markdown AST
level in order to produce the desired output (emitting the list using a
&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All CSS was written through the usual mix of experimentation (see
&lt;a href=&quot;/simple-reload&quot;&gt;simple-reload&lt;/a&gt; for the page reloading solution I
used to aid iterative development) and learning from the CSS used by other
sites.&lt;/p&gt;
&lt;h2 id=&quot;randomly-generated-title-highlights&quot;&gt;&lt;a href=&quot;#randomly-generated-title-highlights&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Randomly generated title highlights&lt;/h2&gt;
&lt;p&gt;The main visual element throughout the site is the randomised, roughly drawn
highlight used for the site name and article headings. This takes some
inspiration from the &lt;a href=&quot;https://roughnotation.com/&quot;&gt;RoughNotation library&lt;/a&gt; (see
also the &lt;a href=&quot;https://shihn.ca/posts/2020/roughjs-algorithms/&quot;&gt;author&amp;#x27;s description of the algorithms
used&lt;/a&gt;), but uses my own
implementation that&amp;#x27;s much more tightly linked to my use case.&lt;/p&gt;
&lt;p&gt;The core logic for drawing these highlights is based around drawing the SVG
path:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determine the position and size of the text element to be highlight (keeping
in mind it might be described by multiple rectangles if split across several
lines).&lt;/li&gt;
&lt;li&gt;For each rectangle, draw a bezier curve starting from the middle of the left
hand side through to the right hand side, with its two control points at
between 20-40% and 40-80% of the width.&lt;/li&gt;
&lt;li&gt;Apply randomised offsets in the x and y directions for every point.
&lt;ul&gt;
&lt;li&gt;The range of the randomised offsets should depend on length of the text.
Generally speaking, a smaller offsets should be used for a shorter piece
of text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This logic is implemented in
&lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/fragments/common.js&quot;&gt;&lt;code&gt;preparePath&lt;/code&gt;&lt;/a&gt;
and reproduced below (with the knowledge the &lt;code&gt;offset(delta)&lt;/code&gt; is a helper to
return a random number between &lt;code&gt;delta&lt;/code&gt; and &lt;code&gt;-delta&lt;/code&gt;, hopefully it&amp;#x27;s clear how
this relates to the logic described above):&lt;/p&gt;
&lt;div class=&quot;highlight&quot; style=&quot;background: #ffffff&quot;&gt;&lt;pre style=&quot;line-height: 125%;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span style=&quot;color: #A90D91&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;preparePath&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;hlInfo&lt;/span&gt;) {
  &lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;parentRect&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;hlInfo&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;svg&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;getBoundingClientRect&lt;/span&gt;();
  &lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rects&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;hlInfo&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;hlEl&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;getClientRects&lt;/span&gt;();
  &lt;span style=&quot;color: #A90D91&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;pathD&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #C41A16&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
  &lt;span style=&quot;color: #A90D91&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rect&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;of&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rects&lt;/span&gt;) {
    &lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;x&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;parentRect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;x&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;parentRect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;y&lt;/span&gt;,
          &lt;span style=&quot;color: #000000&quot;&gt;w&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;width&lt;/span&gt;, &lt;span style=&quot;color: #000000&quot;&gt;h&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;rect&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;height&lt;/span&gt;;
    &lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;mid_y&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;y&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;h&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;2&lt;/span&gt;;
    &lt;span style=&quot;color: #A90D91&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;w&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;75&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;w&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;300&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;?&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;6&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;8&lt;/span&gt;;
    &lt;span style=&quot;color: #A90D91&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;divergePoint&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;.2&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;+&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;.2&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;*&lt;/span&gt; &lt;span style=&quot;color: #A90D91&quot;&gt;Math&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;random&lt;/span&gt;();
    &lt;span style=&quot;color: #000000&quot;&gt;pathD&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #C41A16&quot;&gt;`${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;pathD&lt;/span&gt;&lt;span style=&quot;color: #C41A16&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #C41A16&quot;&gt;      M${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;x+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;} ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;mid_y+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #C41A16&quot;&gt;      C${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;x+w*divergePoint+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;} ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;mid_y+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;},&lt;/span&gt;
&lt;span style=&quot;color: #C41A16&quot;&gt;       ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;x+&lt;/span&gt;&lt;span style=&quot;color: #1C01CE&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;*w*divergePoint+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;} ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;mid_y+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #C41A16&quot;&gt;       ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;x+w+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;} ${&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;mid_y+offset&lt;/span&gt;(&lt;span style=&quot;color: #000000&quot;&gt;maxOff&lt;/span&gt;)&lt;span style=&quot;color: #C41A16&quot;&gt;}`&lt;/span&gt;;
  }
  &lt;span style=&quot;color: #000000&quot;&gt;hlInfo&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;nextPathD&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;pathD&lt;/span&gt;;
  &lt;span style=&quot;color: #000000&quot;&gt;hlInfo&lt;/span&gt;.&lt;span style=&quot;color: #000000&quot;&gt;strokeWidth&lt;/span&gt; &lt;span style=&quot;color: #000000&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #1C01CE&quot;&gt;0.85&lt;/span&gt;&lt;span style=&quot;color: #000000&quot;&gt;*rects&lt;/span&gt;[&lt;span style=&quot;color: #1C01CE&quot;&gt;0&lt;/span&gt;].&lt;span style=&quot;color: #000000&quot;&gt;height&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I took some care to avoid &lt;a href=&quot;https://gist.github.com/paulirish/5d52fb081b3570c81e3a&quot;&gt;forced
layout/reflow&lt;/a&gt; by
batching together reads and writes of the DOM into separate phases when
drawing the initial set of highlights for the page, which is why this function
is generates the path but doesn&amp;#x27;t modify the SVG directly. Separate logic adds
handlers to links that are highlighted continuously redraw the highlight (I
liked the visual effect).&lt;/p&gt;
&lt;h2 id=&quot;minification-and-optimisation&quot;&gt;&lt;a href=&quot;#minification-and-optimisation&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Minification and optimisation&lt;/h2&gt;
&lt;p&gt;I primarily targeted the low-hanging fruit here, and avoided adding in too
many dependencies (e.g. separate HTML and CSS minifiers) during the build.
muxup.com is a very lightweight site - the main extravagance I&amp;#x27;ve allowed
myself is the use of a webfont (Nunito) but that only weighs in at ~36KiB (the
&lt;a href=&quot;https://github.com/googlefonts/nunito/tree/main/fonts/variable&quot;&gt;variable
width&lt;/a&gt; version
converted to woff2 and subsetted using &lt;code&gt;pyftsubset&lt;/code&gt; from
&lt;a href=&quot;https://github.com/fonttools/fonttools&quot;&gt;fontTools&lt;/a&gt;). As the CSS and JS
payload is so small, it&amp;#x27;s inlined into each page.&lt;/p&gt;
&lt;p&gt;The required JS for the article pages and the home page is assembled and then
minified using &lt;a href=&quot;https://github.com/terser/terser&quot;&gt;terser&lt;/a&gt;. This reduces the
size of the JS required for the page you&amp;#x27;re reading from 5077 bytes to 2620
bytes uncompressed (1450 bytes to 991 bytes if compressing the result with
Brotli, though in practice the impact will be a bit different when compressing
the JS together with the rest of the page + CSS). When first published, the
page you are reading (including inlined CSS and JS) was ~27.7KiB uncompressed
(7.7KiB Brotli compressed), which compares to 14.4KiB for its source Markdown
(4.9KiB Brotli compressed).&lt;/p&gt;
&lt;p&gt;Each page contains an embedded stylesheet with a conservative approximation of
the minimal CSS needed. The total amount of CSS is small enough that it&amp;#x27;s easy
to manually split between the CSS that is common across the site, the CSS only
needed for the home page, the CSS common to all articles, and then other CSS
rules that may or may not be needed depending on the page content. For the
latter case, CSS snippets to include are gated on matching a given string
(e.g. &lt;code&gt;&amp;lt;kbd&lt;/code&gt; for use of the &lt;code&gt;&amp;lt;kbd&amp;gt;&lt;/code&gt; tag). For my particular use case, this is
more straight forward and faster than e.g. relying on
&lt;a href=&quot;https://purgecss.com/&quot;&gt;PurgeCSS&lt;/a&gt; as part of the build process.&lt;/p&gt;
&lt;p&gt;The final trick on the frontend is prefetching. Upon hovering on an internal
link, it will be fetched (see the logic at the end of
&lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/fragments/common.js&quot;&gt;common.js&lt;/a&gt;
for the implementation approach), meaning that in the common case any link you
click will already have been loaded and cached. More complex approaches could
be used to e.g. hook the mouse click event and directly update the DOM
using the retrieved data. But this would require work to provide UI feedback
during the load and the incremental benefit over prefetching to prime the
cache seems small.&lt;/p&gt;
&lt;h2 id=&quot;serving-using-caddy&quot;&gt;&lt;a href=&quot;#serving-using-caddy&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Serving using Caddy&lt;/h2&gt;
&lt;p&gt;I had a few goals in setting up &lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy&lt;/a&gt; to serve
this site:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable new and shiny things like HTTP3 and serving Brotli compressed
content.
&lt;ul&gt;
&lt;li&gt;Both are very widely supported on the browser side (and Brotli really
isn&amp;#x27;t &amp;quot;new&amp;quot; any more), but require non-standard modules or custom builds
on Nginx.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Redirect &lt;code&gt;wwww.muxup.com/*&lt;/code&gt; URLs to &lt;code&gt;muxup.com/*&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;HTTP request methods other than &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; should return error 405.&lt;/li&gt;
&lt;li&gt;Set appropriate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;Cache-Control
headers&lt;/a&gt;
in order to avoid unnecessary re-fetching content. Set shorter lifetimes for
served .html and 308 redirects vs other assets. Leave 404 responses with
no Cache-Control header.&lt;/li&gt;
&lt;li&gt;Avoid serving the same content at multiple URLs (unless explicitly asked
for) and don&amp;#x27;t expose the internal filenames of content served via a
different canonical URL. Also, prefer URLs without a trailing slash, but
ensure not to issue a redirect if the target file doesn&amp;#x27;t exist. This
means (for example):
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;muxup.com/about/&lt;/code&gt; should redirect to &lt;code&gt;muxup.com/about&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muxup.com/2022q3////muxup-implementation-notes&lt;/code&gt; should 404 or redirect.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muxup.com/about/./././&lt;/code&gt; should 404 or redirect&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muxup.com/index.html&lt;/code&gt; should 404.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muxup.com/index.html.br&lt;/code&gt; (referring to the precompressed brotli file)
should 404.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muxup.com/non-existing-path/&lt;/code&gt; should 404.&lt;/li&gt;
&lt;li&gt;If there is a directory &lt;code&gt;foo&lt;/code&gt; and a &lt;code&gt;foo.html&lt;/code&gt; at the same level, serve
&lt;code&gt;foo.html&lt;/code&gt; for &lt;code&gt;GET /foo&lt;/code&gt; (and redirect to it for &lt;code&gt;GET /foo/&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Never try to serve &lt;code&gt;*/index.html&lt;/code&gt; or similar (except in the special case of
&lt;code&gt;GET /&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps because my requirements were so specific, this turned out to be a
little more involved than I expected. If seeking to understand the &lt;code&gt;Caddyfile&lt;/code&gt;
format and Caddy configuration in general, I&amp;#x27;d strongly recommend getting a
good understanding of the key ideas by reading &lt;a href=&quot;https://caddyserver.com/docs/caddyfile/concepts&quot;&gt;Caddyfile
concepts&lt;/a&gt;, understanding &lt;a href=&quot;https://caddyserver.com/docs/caddyfile/directives#directive-order&quot;&gt;the
order in which directives are handled by
default&lt;/a&gt;
and how you might control the execution order of directives using the
&lt;a href=&quot;https://caddyserver.com/docs/caddyfile/directives/route&quot;&gt;route&lt;/a&gt; directive or
use the &lt;a href=&quot;https://caddyserver.com/docs/caddyfile/directives/handle&quot;&gt;handle&lt;/a&gt;
directive to specify groups of directives in a mutually exclusive fashion
based on different matchers. The &lt;a href=&quot;https://caddy.community/t/composing-in-the-caddyfile/8291&quot;&gt;Composing in the
Caddyfile&lt;/a&gt; article
provides a good discussion of these options).&lt;/p&gt;
&lt;p&gt;Ultimately, I &lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/utils/server_test.sh&quot;&gt;wrote a quick test
script&lt;/a&gt;
for the desired properties and came up with the following Caddyfile that meets
almost all goals:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	servers {
		protocol {
			experimental_http3
		}
	}
	email asb@asbradbury.org
}

(muxup_file_server) {
	file_server {
		index &amp;quot;&amp;quot;
		precompressed br
		disable_canonical_uris
	}
}
www.muxup.com {
	redir https://muxup.com{uri} 308
	header Cache-Control &amp;quot;max-age=2592000, stale-while-revalidate=2592000&amp;quot;
}
muxup.com {
	root * /var/www/muxup.com/htdocs
	encode gzip
	log {
		output file /var/log/caddy/muxup.com.access.log
	}
	header Strict-Transport-Security &amp;quot;max-age=31536000; includeSubDomains; preload&amp;quot;

	vars short_cache_control &amp;quot;max-age=3600&amp;quot;
	vars long_cache_control &amp;quot;max-age=2592000, stale-while-revalidate=2592000&amp;quot;

	@method_isnt_GET_or_HEAD not method GET HEAD
	@path_is_suffixed_with_html_or_br path *.html *.html/ *.br *.br/
	@path_or_html_suffixed_path_exists file {path}.html {path}
	@html_suffixed_path_exists file {path}.html
	@path_or_html_suffixed_path_doesnt_exist not file {path}.html {path}
	@path_is_root path /
	@path_has_trailing_slash path_regexp ^/(.*)/$

	handle @method_isnt_GET_or_HEAD {
		error 405
	}
	handle @path_is_suffixed_with_html_or_br {
		error 404
	}
	handle @path_has_trailing_slash {
		route {
			uri strip_suffix /
			header @path_or_html_suffixed_path_exists Cache-Control &amp;quot;{vars.long_cache_control}&amp;quot;
			redir @path_or_html_suffixed_path_exists {path} 308
			error @path_or_html_suffixed_path_doesnt_exist 404
		}
	}
	handle @path_is_root {
		rewrite index.html
		header Cache-Control &amp;quot;{vars.short_cache_control}&amp;quot;
		import muxup_file_server
	}
	handle @html_suffixed_path_exists {
		rewrite {path}.html
		header Cache-Control &amp;quot;{vars.short_cache_control}&amp;quot;
		import muxup_file_server
	}
	handle * {
		header Cache-Control &amp;quot;{vars.long_cache_control}&amp;quot;
		import muxup_file_server
	}
	handle_errors {
		header -Cache-Control
		respond &amp;quot;{err.status_code} {err.status_text}&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few notes on the above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It isn&amp;#x27;t currently possible to match URLs with &lt;code&gt;//&lt;/code&gt; due to the
canonicalisation Caddy performs, but 2.6.0 including
&lt;a href=&quot;https://github.com/caddyserver/caddy/pull/4948&quot;&gt;PR #4948&lt;/a&gt; hopefully
provides a solution. Hopefully to allow matching &lt;code&gt;/./&lt;/code&gt; too.&lt;/li&gt;
&lt;li&gt;HTTP3 should &lt;a href=&quot;https://github.com/caddyserver/caddy/pull/4707&quot;&gt;enabled by
default&lt;/a&gt; in Caddy 2.6.0.&lt;/li&gt;
&lt;li&gt;Surprisingly, you need to explicitly opt in to enabling gzip compression
(see &lt;a href=&quot;https://news.ycombinator.com/item?id=32769612&quot;&gt;this discussion&lt;/a&gt; with
the author of Caddy about that choice).&lt;/li&gt;
&lt;li&gt;The combination of &lt;code&gt;try_files&lt;/code&gt; and &lt;code&gt;file_server&lt;/code&gt; provides a large chunk of
the basics, but something like the above handlers is needed to get the
precise desired behaviour for things like redirects, &lt;code&gt;*.html&lt;/code&gt; and &lt;code&gt;*.br&lt;/code&gt;
etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt; is needed within &lt;code&gt;handle @path_has_trailing_slash&lt;/code&gt; because the
default execution order of directives has &lt;code&gt;uri&lt;/code&gt; occurring some time after
&lt;code&gt;redir&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Caddy doesn&amp;#x27;t support dynamically brotli compressing responses, so the
&lt;code&gt;precompressed br&lt;/code&gt; option of &lt;code&gt;file_server&lt;/code&gt; is used to serve pre-compressed
files (as prepared by the &lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/deploy.sh&quot;&gt;deploy
script&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;I&amp;#x27;ve &lt;a href=&quot;https://caddy.community/t/suggestions-for-simplifying-my-caddyfile/17135&quot;&gt;asked for
advice&lt;/a&gt;
on improving the above Caddyfile on the Caddy Discourse.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;analytics&quot;&gt;&lt;a href=&quot;#analytics&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Analytics&lt;/h2&gt;
&lt;p&gt;The simplest possible solution - don&amp;#x27;t have any.&lt;/p&gt;
&lt;h2 id=&quot;footer-images&quot;&gt;&lt;a href=&quot;#footer-images&quot; class=&quot;anchor&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Footer images&lt;/h2&gt;
&lt;p&gt;Last but by no means least, is the randomly selected doodle at the bottom of
each page. I select images from the &lt;a href=&quot;https://github.com/googlecreativelab/quickdraw-dataset&quot;&gt;Quick, Draw!
dataset&lt;/a&gt; and export
them to SVG to be randomly selected on each page load. A rather &lt;a href=&quot;https://github.com/muxup/muxup-site/blob/main/utils/footer_image_helper.py&quot;&gt;scrappy
script&lt;/a&gt;
contains logic to generate SVGs from the dataset&amp;#x27;s NDJSON format and contains
a simple a Flask application that allows selecting desired images from
randomly displayed batches from each dataset.&lt;/p&gt;
&lt;p&gt;With examples such as O&amp;#x27;Reilly&amp;#x27;s beautiful &lt;a href=&quot;https://www.oreilly.com/content/a-short-history-of-the-oreilly-animals/&quot;&gt;engravings of
animals&lt;/a&gt;
on their book covers there&amp;#x27;s a well established tradition of animal
illustrations on technical content - and what better way to honour that
tradition than with a hastily drawn doodle by a random person on the internet
that spins when your mouse hovers over it?&lt;/p&gt;
&lt;hr style=&quot;margin-top:1.75rem&quot;/&gt;&lt;details id=&quot;article-changelog&quot;&gt;&lt;summary&gt;&lt;a href=&quot;#article-changelog&quot; class=&quot;anchor &quot;aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;Article changelog&lt;/summary&gt;
&lt;ul&gt;
&lt;li&gt;2022-09-11: Add HSTS, tweak no-www redirect, and reject HTTP methods
other than GET or POST in Caddyfile. Also link to thread requesting
suggestions for this Caddyfile on Caddy&amp;#x27;s Discourse.&lt;/li&gt;
&lt;li&gt;2022-09-10: Initial publication date.&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
</content>
</entry>
</feed>
